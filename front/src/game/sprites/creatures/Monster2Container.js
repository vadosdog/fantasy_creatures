import {CreatureAPI} from "../../classes/battle/Creature.js";
import Monster2 from "./Monster2.js";
import {useBattleStore} from "../../../store/battle.js";

const battleStore = useBattleStore()

export default class Monster2Container extends Phaser.GameObjects.Container {
    creatureSprite
    creature
    creatureText

    constructor(creature, scene, x, y) {
        super(scene, x, y);
        scene.add.existing(this);

        this.creature = creature;
        this.defaultDirection = creature.direction === 'left' ? 'stand_left' : 'stand_right';

        // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        this.creatureSprite = new Monster2(
            creature.texture,
            scene,
            0,
            0,
            this.defaultDirection
        );

        this.add(this.creatureSprite);
        this.setupEventHandlers();
        this.createGlowSprite();
        this.createCreatureText();
    }

    setupEventHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ—Ä—Ç–∏
        this.creatureSprite.on('deathComplete', () => {
            this.destroy();
        });
    }

    createGlowSprite() {
        this.glowSprite = this.scene.add.sprite(0, 0, 'glowTexture')
            .setVisible(false)
            .setTint(0xFFD900)
            .setAlpha(0.8);

        this.glowSprite.setDisplaySize(
            this.creatureSprite.width * 0.25,
            this.creatureSprite.height * 0.25
        );

        this.addAt(this.glowSprite, 0);
    }

    createCreatureText() {
        this.creatureText = this.scene.add.text(
            0,
            12,
            `${this.creature.name}\n${Math.ceil(this.creature.health)}/${CreatureAPI.getMaxHealth(this.creature)}`,
            {
                fontFamily: "arial",
                fontSize: "11px",
                align: "center"
            }
        ).setOrigin(0.5, 0);

        this.add(this.creatureText);
    }

    setMonsterState(newState) {
        this.creatureSprite.setMonsterState(newState);
    }

    setMonsterActive(active) {
        // –í—ã—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞
        this.glowSprite.setVisible(active);
    }

    setDefaultState() {
        this.creatureSprite.setDefaultState()
    }

    updateVisual() {
        this.creatureText.setText(
            `${this.creature.name}\n${Math.ceil(this.creature.health)}/${CreatureAPI.getMaxHealth(this.creature)}`
        );
    }

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –ª–æ–≥–∏–∫–∏
    update(time, delta) {
        // –õ–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    }

    playActionText(text, color) {
        let actionText = this.scene.add.text(
            0,
            12,
            text,
            {
                fontFamily: "arial",
                fontSize: "16px",
                fontWeight: "bold",
                align: "center",
                color
            }
        )
        actionText.x = this.creatureText.x - (this.creatureText.width / 2)
        this.add(actionText)

        this.scene.tweens.add({
            targets: actionText,
            y: actionText.y - 40,
            alpha: 0,
            duration: 1000,
            ease: 'Power1',
            onComplete: () => {
                actionText.destroy(); // —É–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            }
        });
    }

    updateEffectsIcons() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        this.effectIcons?.forEach(icon => icon.destroy());
        this.effectIcons = [];

        // –ï—Å–ª–∏ —É —Å—É—â–µ—Å—Ç–≤–∞ –Ω–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ - –≤—ã—Ö–æ–¥–∏–º
        if (!this.creature?.effects?.length) return;

        // –≠–º–æ–¥–∑–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–±–∞—Ñ—ã –∏ –¥–µ–±–∞—Ñ—ã)
        const effectEmojis = {
            // –ë–∞—Ñ—ã
            'empower': 'üí™',
            'haste': '‚ö°',
            'luck': 'üçÄ',
            'regen': 'üíö',
            'thorns': 'üåµ',
            'aegis': 'üõ°Ô∏è',
            'defense': 'üõ°Ô∏è', // –º–æ–∂–Ω–æ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π

            // –î–µ–±–∞—Ñ—ã
            'poison': '‚ò†Ô∏è',
            'bleed': 'üíâ',
            'burn': 'üî•',
            'freeze': 'ü•∂',
            'chill': '‚ùÑÔ∏è',
            'blind': 'üëÅÔ∏è‚Äçüó®Ô∏è',
            'curse': 'üìõ',
            'madness': 'ü§™',
            'fear': 'üò±',
            'confusion': 'üòñ' // –Ω—É–∂–Ω–æ –∫–∞–∫–æ–π-—Ç–æ –¥—Ä—É–≥–æ–π
        };

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∏–∫–æ–Ω–∫–∏
        const iconSize = 10; // –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        const padding = 5;   // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∏–∫–æ–Ω–∫–∞–º–∏
        let offsetX = -20;     // –°–º–µ—â–µ–Ω–∏–µ –ø–æ X

        this.creature.effects.forEach((effect, i) => {
            const emoji = effectEmojis[effect.effect];
            if (!emoji) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã

            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —ç–º–æ–¥–∑–∏
            const icon = this.scene.add.text(
                offsetX + i % 4 * (iconSize + padding),
                -30 + Math.floor(i / 4) * (iconSize + padding), // –†–∞–∑–º–µ—â–∞–µ–º –Ω–∞–¥ —Å—É—â–µ—Å—Ç–≤–æ–º
                emoji,
                {
                    fontSize: iconSize + 'px',
                    padding: {x: 2, y: 2}
                }
            ).setOrigin(0.5);

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.add(icon);
            this.effectIcons.push(icon);
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    setHovered(isHighlighted) {
        if (isHighlighted) {
            battleStore.setHoveredCreature(this.creature.id)
            this.creatureSprite.setTint(0xffff00);
        } else {
            this.creatureSprite.clearTint();
            battleStore.setHoveredCreature(null);
        }
    }
}
